<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[debounce和throttle函数]]></title>
      <url>https://mlxiao93.github.io/blog/blog/2017/02/05/debounce-and-throttle/</url>
      <content type="html"><![CDATA[<p>前端开发中某些dom事件的触发频率非常高，有时候监听这些事件的函数并不需要那么高的执行频率，此时就得用上这两个函数</p>
<a id="more"></a>
<h2 id="debounce"><a href="#debounce" class="headerlink" title="debounce"></a>debounce</h2><p>防抖函数<br>应用场景：auto complete, 监听onchange并从后台拉取建议，需要等待用户输入完毕(规定时间内没有输入)再调用后台</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, timeout</span>) </span>&#123;</div><div class="line">  timeout = timeout || <span class="number">0</span>;</div><div class="line">  <span class="keyword">var</span> timer;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> _args = <span class="built_in">arguments</span>;</div><div class="line">    <span class="keyword">let</span> self = <span class="keyword">this</span>;</div><div class="line">    timer &amp;&amp; clearTimeout(timer);</div><div class="line">    timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      fn.apply(self, _args);</div><div class="line">    &#125;, timeout);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="throttle"><a href="#throttle" class="headerlink" title="throttle"></a>throttle</h2><p>节流函数<br>应用场景：轮播图的翻页，假如翻页动画的执行时间是400ms，为了防止用户快速重复点击导致bug，可以使用该函数设置400ms内只能执行一次翻页<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, timeout, execLast</span>) </span>&#123;    <span class="comment">//execLast: 是否执行最后一次触发，若最后一次触发在上一次执行的timeout内，默认不执行</span></div><div class="line">  timeout = timeout || <span class="number">0</span>;</div><div class="line">  <span class="keyword">let</span> lastExecTime = <span class="number">0</span>;</div><div class="line">  <span class="keyword">var</span> timer;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    timer &amp;&amp; clearTimeout(timer);</div><div class="line">    <span class="keyword">let</span> _args = <span class="built_in">arguments</span>;</div><div class="line">    <span class="keyword">let</span> self = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (execLast) &#123;</div><div class="line">      timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        lastExecTime = <span class="built_in">Date</span>.now();</div><div class="line">        fn.apply(self, _args);</div><div class="line">      &#125;, timeout);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">Date</span>.now() - lastExecTime &lt; timeout) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">    lastExecTime = <span class="built_in">Date</span>.now();</div><div class="line">    fn.apply(self, _args);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>用一个形象的例子比喻：debounce就是一辆定时发车的公交车，throttle就是一辆人满发车的黑车</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[实现LazyMan]]></title>
      <url>https://mlxiao93.github.io/blog/blog/2017/02/05/lazy-man/</url>
      <content type="html"><![CDATA[<p>LazyMan是一道经典的javascript流程控制问题</p>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">LazyMan(&apos;Hank&apos;)</div><div class="line">//log：Hi, this is Hank</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">LazyMan(&apos;Hank&apos;).eat(&apos;super&apos;).eat(&apos;dinner&apos;)</div><div class="line">//log: Hi, this is Hank</div><div class="line">//log: Eat super</div><div class="line">//log: Eat dinner</div></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">LazyMan(&apos;Hank&apos;).sleep(5).eat(&apos;dinner&apos;)</div><div class="line">//log: Hi! This is Hank</div><div class="line">//等待3秒..</div><div class="line">//log: Wake up after 5 seconds</div><div class="line">//log: Eat dinner</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">LazyMan(&apos;Hank&apos;).sleepFirst(5).eat(&apos;dinner&apos;)</div><div class="line">//等待3秒</div><div class="line">//log: Wake up after 5 seconds</div><div class="line">//log: Hi, this is Hank</div><div class="line">//log: Eat dinner</div></pre></td></tr></table></figure>
<h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><ul>
<li>根据调用形式，LazyMan是一个工厂函数，返回用于实现逻辑的类的对象</li>
<li>sleep/sleepFirst会阻塞链式调用，所以所有的方法执行语句(任务)都应该先保存起来，在某个时机统一依次执行</li>
<li>使用一个队列（用数组模拟）保存任务，并提供一个next方法，当一个任务执行完后调用next可以执行下一个任务</li>
<li>sleepFisrt会首先执行，所以sleepFisrt的任务需要保存在队列的最前</li>
<li>任务的开始(首次调用next)在构造函数内，同时要保证任务开始前，所有任务都已经存入队列，所以首次调用next需要放在setTimeout函数内(此处需要理解<a href="http://www.alloyteam.com/2015/10/turning-to-javascript-series-from-settimeout-said-the-event-loop-model/" target="_blank" rel="external">setTimeout的执行机制</a>)</li>
</ul>
<h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">_LazyMan</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.jobs = [];</div><div class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">  <span class="keyword">this</span>.jobs.push(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Hi, this is '</span> + name);</div><div class="line">    self._next();</div><div class="line">  &#125;);</div><div class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    self._next();</div><div class="line">  &#125;);</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">_LazyMan.prototype._next = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> job = <span class="keyword">this</span>.jobs.shift();</div><div class="line">  job &amp;&amp; job();</div><div class="line">&#125;;</div><div class="line"></div><div class="line">_LazyMan.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params">meal</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">  <span class="keyword">this</span>.jobs.push(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Eat '</span> + meal);</div><div class="line">    self._next();</div><div class="line">  &#125;);</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">_LazyMan.prototype.sleep = <span class="function"><span class="keyword">function</span>(<span class="params">seconds</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">  <span class="keyword">this</span>.jobs.push(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'Wake up after '</span> + seconds + <span class="string">' seconds'</span>);</div><div class="line">      self._next();</div><div class="line">    &#125;, seconds * <span class="number">1000</span>);</div><div class="line">  &#125;);</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">_LazyMan.prototype.sleepFirst = <span class="function"><span class="keyword">function</span> (<span class="params">seconds</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">  <span class="keyword">this</span>.jobs.unshift(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'Wake up after '</span> + seconds + <span class="string">' seconds'</span>);</div><div class="line">      self._next();</div><div class="line">    &#125;, seconds * <span class="number">1000</span>);</div><div class="line">  &#125;);</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">LazyMan</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> _LazyMan(name);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JS实现继承]]></title>
      <url>https://mlxiao93.github.io/blog/blog/2017/02/04/js-extend/</url>
      <content type="html"><![CDATA[<h2 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h2><p>子类的原型指向父类的对象</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sup</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.foo = &#123;<span class="attr">name</span>: <span class="string">'hello'</span>&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line">Sub.prototype = <span class="keyword">new</span> Sup();</div><div class="line"></div><div class="line"><span class="comment">/* ---test--- */</span></div><div class="line"><span class="keyword">var</span> sub = <span class="keyword">new</span> Sub();</div><div class="line"><span class="built_in">console</span>.log(sub.foo.name);    <span class="comment">//hello</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p><em>缺点: 引用类型的成员会被所有子类的对象共享</em><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Sub();</div><div class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> Sub();</div><div class="line">b.foo.name = <span class="string">"world"</span>;</div><div class="line"><span class="built_in">console</span>.log(a.foo.name, b.foo.name);   <span class="comment">//world world</span></div></pre></td></tr></table></figure></p>
<h2 id="借用构造函数"><a href="#借用构造函数" class="headerlink" title="借用构造函数"></a>借用构造函数</h2><p>利用<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply" target="_blank" rel="external">apply函数</a>拷贝父类的成员</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sup</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.foo = &#123;<span class="attr">name</span>: <span class="string">'hello'</span>&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  Sup.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/* ---test--- */</span></div><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Sub();</div><div class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> Sub();</div><div class="line">b.foo.name = <span class="string">"world"</span>;</div><div class="line"><span class="built_in">console</span>.log(a.foo.name, b.foo.name);   <span class="comment">//hello world</span></div></pre></td></tr></table></figure>
<p><em>缺点：无法继承父类原型上的成员</em></p>
<h2 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h2><p>结合<a href="#原型链继承">原型链继承</a>和<a href="#借用构造函数">借用构造函数</a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sup</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.foo = &#123;<span class="attr">name</span>: <span class="string">'hello'</span>&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  Sup.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</div><div class="line">&#125;;</div><div class="line">Sub.prototype = <span class="keyword">new</span> Sup();</div></pre></td></tr></table></figure></p>
<p><em>缺点：父类的构造函数被调用了两次</em></p>
<h2 id="寄生组合继承"><a href="#寄生组合继承" class="headerlink" title="寄生组合继承"></a>寄生组合继承</h2><ol>
<li><a href="#借用构造函数">借用构造函数</a></li>
<li>创建一个辅助函数使其原型指向父类的原型，新建一个该辅助函数的对象(该对象继承父类原型)</li>
<li>将该对象的constructor属性指向子类</li>
<li>将该对象作为子类的原型</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sup</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.foo = &#123;<span class="attr">name</span>: <span class="string">'hello'</span>&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  Sup.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);   <span class="comment">// step 1</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// step 2</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Temp</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">Temp.prototype = Sup.prototype;</div><div class="line"><span class="keyword">let</span> temp = <span class="keyword">new</span> Temp();</div><div class="line"></div><div class="line">temp.constructor = Sub;  <span class="comment">// step 3</span></div><div class="line"></div><div class="line">Sub.prototype = temp;  <span class="comment">// step 4</span></div></pre></td></tr></table></figure>
<h2 id="ES6继承"><a href="#ES6继承" class="headerlink" title="ES6继承"></a>ES6继承</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sup</span> </span>&#123;&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Sup</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
  
  
</search>
