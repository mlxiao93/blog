<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[判断元素是否出现在视口]]></title>
      <url>http://mlxiao.com/2017/02/20/ele-in-viewport/</url>
      <content type="html"><![CDATA[<p>判断元素是否出现在视口即元素是否在当前窗口内可见，利用这个判定可以做<a href="https://mlxiao93.github.io/demos/#/img-lazy-load" target="_blank" rel="external">图片的懒加载</a>等功能</p>
<a id="more"></a>
<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="得到视口的尺寸"><a href="#得到视口的尺寸" class="headerlink" title="得到视口的尺寸"></a>得到视口的尺寸</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/innerHeight" target="_blank" rel="external"><code>window.innerWidth</code></a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/innerWidth" target="_blank" rel="external"><code>window.innerHeight</code></a>，兼容性不佳。<br><code>document.documentElement.clinetWidth</code>, <code>document.doucmentElement.clientHeight</code>，IE也支持<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> viewportWidth = <span class="built_in">window</span>.innerWidth || <span class="built_in">document</span>.documentElement.clinetWidth;</div><div class="line"><span class="keyword">var</span> viewportHeight = <span class="built_in">window</span>.innerHeight || <span class="built_in">document</span>.doucmentElement.clientHeight;</div></pre></td></tr></table></figure></p>
<h3 id="getBoundingClientRec"><a href="#getBoundingClientRec" class="headerlink" title="getBoundingClientRec"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect" target="_blank" rel="external">getBoundingClientRec</a></h3><p>该方法返回会一个矩形对象，包含4 个属性：left、top、right 和bottom。这些属性给出了元素在页面中相对于视口的位置。如下图所示：</p>
<p><img src="http://o86lf0oxm.bkt.clouddn.com/blog-el-in-viewport-01.png" alt="getBoundingClientRec"></p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="是否完整出现在视口"><a href="#是否完整出现在视口" class="headerlink" title="是否完整出现在视口"></a>是否完整出现在视口</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isElementInViewPort</span>(<span class="params">el</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> viewportWidth = <span class="built_in">window</span>.innerWidth || <span class="built_in">document</span>.documentElement.clinetWidth,</div><div class="line">      viewportHeight = <span class="built_in">window</span>.innerHeight || <span class="built_in">document</span>.doucmentElement.clientHeight,</div><div class="line">      rect = el.getBoundingClientRect();</div><div class="line">  <span class="keyword">return</span> rect.top &gt;= <span class="number">0</span> &amp;&amp;</div><div class="line">    rect.left &gt;= <span class="number">0</span> &amp;&amp;</div><div class="line">    rect.bottom &lt;= viewportHeight &amp;&amp;</div><div class="line">    rect.right &lt;= viewportWidth;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="是否部分出现在视口"><a href="#是否部分出现在视口" class="headerlink" title="是否部分出现在视口"></a>是否部分出现在视口</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isElementInViewPort</span>(<span class="params">el</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> viewportWidth = <span class="built_in">window</span>.innerWidth || <span class="built_in">document</span>.documentElement.clinetWidth,</div><div class="line">      viewportHeight = <span class="built_in">window</span>.innerHeight || <span class="built_in">document</span>.doucmentElement.clientHeight,</div><div class="line">      rect = el.getBoundingClientRect();</div><div class="line">  <span class="keyword">return</span> rect.bottom &gt; <span class="number">0</span> &amp;&amp;</div><div class="line">    rect.bottom &lt; viewportHeight + el.offsetHeight &amp;&amp;</div><div class="line">    rect.right &gt; <span class="number">0</span> &amp;&amp;</div><div class="line">    rect.right &lt; viewportWidth + el.offsetWidth;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="扩展知识"><a href="#扩展知识" class="headerlink" title="扩展知识"></a>扩展知识</h2><ul>
<li><p><code>clientWidth</code>,<code>clientHeight</code><br>元素的客户区大小，指的是元素内容(content)及其内边距(padding)所占据的空间大小</p>
<p><img src="http://o86lf0oxm.bkt.clouddn.com/blog-el-in-viewport-02.png" alt="clientWidth, clientHeight"></p>
</li>
<li><p><code>offsetWidth</code>, <code>offsetHeight</code> | <code>offsetLeft</code>, <code>offsetTop</code><br>元素在屏幕上占用的所有可见的空间 | 元素的外边框(margin)至包含元素的内边框(padding)之间的距离</p>
<p><img src="http://o86lf0oxm.bkt.clouddn.com/blog-el-in-viewport-03.png" alt="offsetWidth, offsetHeight | offsetLeft, offsetTop"></p>
</li>
<li><p><code>scrollWidth</code>, <code>scrollHeight</code> | <code>scrollLeft</code>, <code>scrollTop</code><br> 包含滚动内容的元素的大小 | 被隐藏在内容区域左(上)测的像素数</p>
<p> <img src="http://o86lf0oxm.bkt.clouddn.com/blog-el-in-viewport-04.png" alt="scrollWidth, scrollHeight | scrollLeft, scrollTop"></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[js深拷贝]]></title>
      <url>http://mlxiao.com/2017/02/19/deep-copy/</url>
      <content type="html"><![CDATA[<p>深拷贝指的是对象属性所引用的对象全部进行新建对象复制，以保证深复制的对象的引用图不包含任何原有对象或对象图上的任何对象，隔离出两个完全不同的对象。可参考lodash的<a href="https://lodash.com/docs/4.17.3#cloneDeep" target="_blank" rel="external">cloneDeep</a></p>
<a id="more"></a>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul>
<li>非引用类型比如String, Number, Boolean, Function直接赋值</li>
<li>RexExp和Date类型调用各自的构造函数进行复制</li>
<li>其他类型比如Array, Object需对其所有子属性、孙子属性进行单独复制</li>
</ul>
<h2 id="深度优先的实现方式"><a href="#深度优先的实现方式" class="headerlink" title="深度优先的实现方式"></a>深度优先的实现方式</h2><p>使用递归处理子孙属性</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopyDepth</span>(<span class="params">target</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> _target;</div><div class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(target)) &#123;    <span class="comment">//数组</span></div><div class="line">    _target = [];</div><div class="line">    target.map(<span class="function"><span class="params">item</span> =&gt;</span> _target.push(deepCopyDepth(item)))</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target <span class="keyword">instanceof</span> <span class="built_in">Date</span>) &#123;    <span class="comment">//Date对象</span></div><div class="line">    _target = <span class="keyword">new</span> <span class="built_in">Date</span>(target);</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>) &#123;    <span class="comment">//RegExp对象</span></div><div class="line">    _target = <span class="keyword">new</span> <span class="built_in">RegExp</span>(target);</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target &amp;&amp; <span class="keyword">typeof</span> target === <span class="string">'object'</span>) &#123;   <span class="comment">//Object，排除null</span></div><div class="line">    _target = &#123;&#125;;</div><div class="line">    <span class="built_in">Object</span>.keys(target).map(<span class="function"><span class="params">key</span> =&gt;</span> _target[key] = deepCopyDepth(target[key]));</div><div class="line">  &#125; <span class="keyword">else</span> &#123;     <span class="comment">//其它情况: String，Boolean，Number等</span></div><div class="line">    _target = target;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> _target;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="广度优先的实现方式"><a href="#广度优先的实现方式" class="headerlink" title="广度优先的实现方式"></a>广度优先的实现方式</h2><ul>
<li>利用队列，目标元素首先执行浅拷贝，然后入队</li>
<li>出队浅拷贝所有子属性，然后子属性入队。循环直到队列为空</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopyBreadth</span>(<span class="params">target</span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">let</span> lightCopy = <span class="function"><span class="params">item</span> =&gt;</span> &#123;     <span class="comment">//浅拷贝</span></div><div class="line">    <span class="keyword">let</span> _item;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(item)) &#123;</div><div class="line">      _item = [...item]</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item <span class="keyword">instanceof</span> <span class="built_in">Date</span>) &#123;    <span class="comment">//Date对象</span></div><div class="line">      _item = <span class="keyword">new</span> <span class="built_in">Date</span>(item);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>) &#123;    <span class="comment">//RegExp对象</span></div><div class="line">      _item = <span class="keyword">new</span> <span class="built_in">RegExp</span>(item);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item &amp;&amp; <span class="keyword">typeof</span> item === <span class="string">'object'</span>) &#123;</div><div class="line">      _item = &#123;...item&#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      _item = item;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> _item;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">let</span> queue = [];</div><div class="line">  <span class="keyword">let</span> _target = lightCopy(target);     <span class="comment">//入队前对最外层执行浅拷贝</span></div><div class="line">  queue.unshift(_target);      <span class="comment">//首次入队</span></div><div class="line"></div><div class="line">  <span class="keyword">while</span> (queue.length &gt; <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">let</span> copy = queue.pop();      <span class="comment">//出队处理子属性</span></div><div class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(copy)) &#123;</div><div class="line">      copy.map(<span class="function">(<span class="params">item, i</span>) =&gt;</span> &#123;</div><div class="line">        copy[i] = lightCopy(item);  <span class="comment">//浅拷贝子属性</span></div><div class="line">        queue.unshift(copy[i])     <span class="comment">//子属性入队</span></div><div class="line">      &#125;)</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (copy &amp;&amp; <span class="keyword">typeof</span> copy === <span class="string">'object'</span> &amp;&amp; !(target <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>) &amp;&amp; !(target <span class="keyword">instanceof</span> <span class="built_in">Date</span>) ) &#123;</div><div class="line">      <span class="built_in">Object</span>.keys(copy).map(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</div><div class="line">        copy[key] = lightCopy(copy[key]);   <span class="comment">//浅拷贝子属性</span></div><div class="line">        queue.unshift(copy[key])   <span class="comment">//子属性入队</span></div><div class="line">      &#125;)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> _target;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="简洁的实现方式"><a href="#简洁的实现方式" class="headerlink" title="简洁的实现方式"></a>简洁的实现方式</h2><ul>
<li>利用JSON.stringify和JSON.parse进行序列化和反序列化</li>
<li>无法对Function和RegExp进行复制</li>
<li>一般需要进行深拷贝的数据不会出现Funtion和RegExp等类型的成员，此法最佳</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params">target</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(target));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[js链式累加函数]]></title>
      <url>http://mlxiao.com/2017/02/19/sum-chain/</url>
      <content type="html"><![CDATA[<p>实现<code>sum(1, 2)(3)(4)</code>使输出结果为10，即<code>1 + 2 + 3 + 4 = 10</code></p>
<a id="more"></a>
<h2 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h2><ul>
<li>sum需要返回一个函数</li>
<li>被返回函数的toString方法需要重写</li>
<li>将arguments转为Array，调用reduce方法</li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>先做一个<code>sum(1)(2)(3)</code>的版本：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span> (<span class="params">x</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params">y</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> sum(x + y);</div><div class="line">  &#125;;</div><div class="line">  foo.toString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> x;</div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">return</span> foo;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>完整实现：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> x = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>).reduce(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> a + b;</div><div class="line">  &#125;);</div><div class="line">  <span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> y = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>).reduce(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> a + b;</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> sum(x + y);</div><div class="line">  &#125;;</div><div class="line">  foo.toString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> x;</div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">return</span> foo;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[dom事件代理函数]]></title>
      <url>http://mlxiao.com/2017/02/16/delegate-event/</url>
      <content type="html"><![CDATA[<p>使用原生js实现一个事件代理，兼容IE</p>
<a id="more"></a>
<h2 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h2><ul>
<li>利用事件冒泡，在父元素的事件响应函数里处理目标元素</li>
<li>IE使用attachEvent添加事件响应函数</li>
<li>IE的event对象需要使用window.event, event.target使用event.srcElement</li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">matchSelector</span>(<span class="params">ele, selector</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="regexp">/^#/</span>.test(selector)) &#123;     <span class="comment">//匹配id</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'#'</span> + ele.id === selector</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (<span class="regexp">/^\./</span>.test(selector)) &#123;    <span class="comment">//匹配classname</span></div><div class="line">    <span class="keyword">return</span> ele.classList.contains(selector.substr(<span class="number">1</span>))   <span class="comment">//classList不兼容IE，此处不是重点</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> ele.tagName.toLocaleLowerCase() === selector;    <span class="comment">//匹配tagname</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * @param ele 父元素</div><div class="line"> * @param selector 目标选择器</div><div class="line"> * @param type 事件类型</div><div class="line"> * @param fn 事件响应函数</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">delegateEvent</span>(<span class="params">ele, selector, type, fn</span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handle</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">    e = e || <span class="built_in">window</span>.event;</div><div class="line">    <span class="keyword">let</span> target = e.target || e.srcElement;</div><div class="line">    <span class="keyword">if</span> (matchSelector(target, selector)) &#123;</div><div class="line">      fn.call(target, e);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (ele.addEventListener) &#123;</div><div class="line">    ele.addEventListener(type, handle)</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    ele.attachEvent(type, handle)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调用示例<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">delegateEvent(<span class="built_in">document</span>.querySelector(<span class="string">'ul'</span>), <span class="string">'.foo'</span>, <span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.dir(<span class="string">'class'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">delegateEvent(<span class="built_in">document</span>.querySelector(<span class="string">'ul'</span>), <span class="string">'#a'</span>, <span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'id'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">delegateEvent(<span class="built_in">document</span>.querySelector(<span class="string">'ul'</span>), <span class="string">'li'</span>, <span class="string">'click'</span>, funcion(e) &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'tag name'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[封装fetch api]]></title>
      <url>http://mlxiao.com/2017/02/11/encapsulation-fetch/</url>
      <content type="html"><![CDATA[<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API" target="_blank" rel="external">fetch</a>是es6新增的一个方法，可以用来替代XMLHttpRequest和jquery.ajax。fetch目前尚处于实验性阶段，浏览器兼容性不容乐观，好在有<a href="https://github.com/github/fetch" target="_blank" rel="external">polyfill</a>可用。</p>
<a id="more"></a>
<h2 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h2><ul>
<li>原生fetch的对于get请求的params是拼接到url后，比如<code>fetch(&#39;http://yourapi.com?foo=1&#39;)</code>，把它封装成<code>$fetch([&#39;http://yourapi.com&#39;, {foo: 1}])</code></li>
<li>个人习惯把api的url统一写到一个清单文件里，所以需要支持pathParam占位符：<code>$fetch[&#39;http://youapi.com/users/{uid}/articles/{aid}&#39;, {uid: 1, aid: 2}]</code>,</li>
<li>由于使用<a href="https://jwt.io/" target="_blank" rel="external">JWT认证</a>，需要缓存和发送token，也可以在此统一处理。</li>
<li>将post的body自动做stringify处理</li>
<li>添加<code>beforeEach</code>和<code>afterEach</code></li>
<li>只对fetch做扩展，可以和使用fetch一样使用$fetch</li>
</ul>
<p><em>以下代码均需要babel环境，配置可参考另一篇博客<a href="http://mlxiao.com/2017/02/08/webpack/#ES6-支持">使用webpack构建项目 - ES6+支持</a></em></p>
<h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">"babel-polyfill"</span>;</div><div class="line"><span class="keyword">import</span> <span class="string">'whatwg-fetch'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> CONFIG = &#123;</div><div class="line">  <span class="attr">tokenKey</span>: <span class="string">'JWT_TOKEN'</span>,</div><div class="line">  <span class="attr">beforeEach</span>: <span class="literal">null</span>,</div><div class="line">  <span class="attr">afterEach</span>: <span class="literal">null</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">convertUrl</span>(<span class="params">url</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(url)) <span class="keyword">return</span> url;</div><div class="line"></div><div class="line">  <span class="keyword">let</span> params = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(url[<span class="number">1</span>])) || &#123;&#125;;</div><div class="line">  url = url[<span class="number">0</span>];</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (<span class="regexp">/&#123;.*&#125;/</span>.test(url)) &#123;    <span class="comment">//有pathParam, 先填充pathParam</span></div><div class="line">    <span class="keyword">let</span> placeholders = url.match(<span class="regexp">/&#123;.*?&#125;/g</span>);    <span class="comment">//利用match匹配出所有占位符</span></div><div class="line">    placeholders &amp;&amp; placeholders.map(<span class="function"><span class="params">placeholder</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">let</span> key = (<span class="regexp">/&#123;(.*?)&#125;/</span>.exec(placeholder) || [])[<span class="number">1</span>];  <span class="comment">//利用exec匹配出param key</span></div><div class="line">      <span class="keyword">let</span> value = params[key];</div><div class="line">      <span class="keyword">if</span> (value !== <span class="literal">undefined</span>) &#123;</div><div class="line">        url = url.replace(placeholder, value);</div><div class="line">        <span class="keyword">delete</span> params[key];</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">let</span> paramsStr = <span class="built_in">Object</span>.keys(params).map(<span class="function"><span class="params">key</span> =&gt;</span> &#123;     <span class="comment">//请求参数字符串</span></div><div class="line">      <span class="keyword">return</span> <span class="built_in">encodeURIComponent</span>(key) + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(params[key]);</div><div class="line">    &#125;).join(<span class="string">'&amp;'</span>);</div><div class="line">  <span class="keyword">return</span> paramsStr ? url + <span class="string">'?'</span> + paramsStr : url;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setToken</span>(<span class="params">token</span>) </span>&#123;</div><div class="line">  localStorage.setItem(CONFIG.tokenKey, token);   <span class="comment">//将token保存在localStorage</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getToken</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> localStorage.getItem(CONFIG.tokenKey);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/***</span></div><div class="line"> * @param url 支持以数组的形式包含query params和path params</div><div class="line"> * @param init 原生feth的第二个参数</div><div class="line"> * @param needToken 是否需要发送token</div><div class="line"> * @return &#123;Promise.&lt;Promise.&lt;TResult&gt;|*&gt;&#125;</div><div class="line"> */</div><div class="line"><span class="keyword">let</span> $fetch = <span class="keyword">async</span> (url, init = &#123;&#125;, needToken = <span class="literal">false</span>) =&gt; &#123;</div><div class="line">  <span class="keyword">let</span> _url = convertUrl(url);</div><div class="line">  init.headers = init.headers || &#123;&#125;;</div><div class="line">  <span class="keyword">if</span> (needToken) &#123;</div><div class="line">    init.headers[CONFIG.tokenKey] = getToken();</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> init.body === <span class="string">'object'</span> &amp;&amp; !(a <span class="keyword">instanceof</span> FormData)) &#123;</div><div class="line">    init.body = <span class="built_in">JSON</span>.stringify(init.body);     <span class="comment">//将非FormData的Object body做stringify处理</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  CONFIG.beforeEach &amp;&amp; CONFIG.beforeEach();</div><div class="line">  <span class="keyword">let</span> res = <span class="keyword">await</span> fetch(_url, init).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;    <span class="comment">//调用原生fetch</span></div><div class="line">    <span class="keyword">let</span> token = res.headers.get(CONFIG.tokenKey);</div><div class="line">    <span class="keyword">if</span> (token) setToken(token);     <span class="comment">//保存jwt token</span></div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">  &#125;);</div><div class="line">  CONFIG.afterEach &amp;&amp; CONFIG.afterEach();</div><div class="line">  <span class="keyword">return</span> res;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">$fetch.init = <span class="function">(<span class="params">&#123;tokenKey = <span class="string">'JWT_TOKEN'</span>, beforeEach, afterEach&#125; = &#123;&#125;</span>) =&gt;</span> &#123;</div><div class="line">  CONFIG.tokenKey = tokenKey;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> beforeEach === <span class="string">'function'</span>) CONFIG.beforeEach = beforeEach;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> afterEach === <span class="string">'function'</span>) CONFIG.afterEach = afterEach;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> $fetch;</div></pre></td></tr></table></figure>
<h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> $fetch <span class="keyword">from</span> <span class="string">'fetch'</span>;</div><div class="line"></div><div class="line">$fetch.init(&#123;</div><div class="line">  <span class="attr">beforeEach</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'before each'</span>),</div><div class="line">  <span class="attr">afterEach</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'after each'</span>)</div><div class="line">&#125;);</div><div class="line"></div><div class="line">$fetch(<span class="string">'http://yourapi.com?foo=1'</span>)     <span class="comment">//get http://yourapi.com?foo=1</span></div><div class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> res.json()).then(<span class="function"><span class="params">resBody</span> =&gt;</span> <span class="built_in">console</span>.log(resBody));</div><div class="line"></div><div class="line">$fetch([<span class="string">'http://yourapi.com'</span>, &#123;<span class="attr">foo</span>: <span class="number">1</span>&#125;])  <span class="comment">//get http://yourapi.com?foo=1</span></div><div class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> res.json()).then(<span class="function"><span class="params">resBody</span> =&gt;</span> <span class="built_in">console</span>.log(resBody));</div><div class="line"></div><div class="line">$fetch([<span class="string">'http://yourapi.com/users/&#123;id&#125;'</span>, &#123;<span class="attr">id</span>: <span class="number">1</span> ,<span class="attr">foo</span>: <span class="number">1</span>&#125;])  <span class="comment">//get http://yourapi.com/users/1?foo=1</span></div><div class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> res.json()).then(<span class="function"><span class="params">resBody</span> =&gt;</span> <span class="built_in">console</span>.log(resBody));</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[scss实用技巧]]></title>
      <url>http://mlxiao.com/2017/02/10/scss-skill/</url>
      <content type="html"><![CDATA[<p>记录scss在开发中的一些运用</p>
<a id="more"></a>
<h2 id="media-query的封装"><a href="#media-query的封装" class="headerlink" title="media query的封装"></a>media query的封装</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">mixin</span> for-phone-only &#123;</div><div class="line">  @<span class="keyword">media</span> (max-width: 599px) &#123; @<span class="keyword">content</span>; &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">mixin</span> for-tablet-portrait-up &#123;</div><div class="line">  @<span class="keyword">media</span> (min-width: 600px) &#123; @<span class="keyword">content</span>; &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">mixin</span> for-tablet-landscape-up &#123;</div><div class="line">  @<span class="keyword">media</span> (min-width: 900px) &#123; @<span class="keyword">content</span>; &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">mixin</span> for-desktop-up &#123;</div><div class="line">  @<span class="keyword">media</span> (min-width: 1200px) &#123; @<span class="keyword">content</span>; &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">mixin</span> for-big-desktop-up &#123;</div><div class="line">  @<span class="keyword">media</span> (min-width: 1800px) &#123; @<span class="keyword">content</span>; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>用法：<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">include</span> for-phone-only &#123;</div><div class="line">  <span class="comment">//style for phone only</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="画特定列数的网格"><a href="#画特定列数的网格" class="headerlink" title="画特定列数的网格"></a>画特定列数的网格</h2><p></p><p data-height="265" data-theme-id="0" data-slug-hash="vgQMxO" data-default-tab="css,result" data-user="mlxiao93" data-embed-version="2" data-pen-title="vgQMxO" class="codepen">See the Pen <a href="http://codepen.io/mlxiao93/pen/vgQMxO/" target="_blank" rel="external">vgQMxO</a> by mlxiao93 (<a href="http://codepen.io/mlxiao93" target="_blank" rel="external">@mlxiao93</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script></p>
<ul>
<li>drawItem接收列数作为参数</li>
<li>scss变量参与计算: <code>width: (100% / $count);</code></li>
<li>scss变量参与组装语句: <code>&amp;:nth-child(#{$count}n + 1) {}</code></li>
</ul>
<h2 id="配合BEM"><a href="#配合BEM" class="headerlink" title="配合BEM"></a>配合<a href="http://getbem.com/" target="_blank" rel="external">BEM</a></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"login__form"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"login__input login__input--username"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"login__input login__input--password"</span> <span class="attr">type</span>=<span class="string">"password"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"login__btn"</span>&gt;</span>submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.login</span> &#123;</div><div class="line">  &amp;__form &#123;</div><div class="line">  &#125;</div><div class="line">  &amp;__input &#123;</div><div class="line">    &amp;--username &#123;</div><div class="line">    &#125;</div><div class="line">    &amp;--password &#123;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  &amp;__btn &#123;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[实现一个Promise]]></title>
      <url>http://mlxiao.com/2017/02/09/promise/</url>
      <content type="html"><![CDATA[<p>使用es6语法做一个简单的实现</p>
<a id="more"></a>
<h2 id="功能描述"><a href="#功能描述" class="headerlink" title="功能描述"></a>功能描述</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="external">Promise定义</a><br>此处只实现一个包含构造函数，resolve方法和reject方法的简化版本</p>
<h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><ul>
<li>需要有一个对象(defer)保存resolve callback和reject callback，一个工厂函数(Promise)返回这个对象</li>
<li>defer对象需要有个then方法用来注册resolve callback和reject callback</li>
<li>defer对象需要一个resolve方法执行resolve callback，一个reject方法执行reject callback</li>
<li>工厂函数(Promise)的构造函数接收一个函数作为参数，返回defer对象</li>
<li>工厂函数(Promise)需要两个静态方法: resolve，reject，均返回defer对象</li>
<li>使用setTimeout保证callback的注册先于resolve或reject方法的执行(见代码22行、30行、39行)</li>
</ul>
<h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Defer</span> </span>&#123;</div><div class="line">  resolveCallback = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;;</div><div class="line">  rejectCallback = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;;</div><div class="line"></div><div class="line">  then(resolveCallback = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;, rejectCallback = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;) &#123;</div><div class="line">    <span class="keyword">this</span>.resolveCallback = resolveCallback;</div><div class="line">    <span class="keyword">this</span>.rejectCallback = rejectCallback;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  resolve(data) &#123;</div><div class="line">    <span class="keyword">this</span>.resolveCallback(data);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  reject(data) &#123;</div><div class="line">    <span class="keyword">this</span>.rejectCallback(data);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Promise</span> </span>&#123;</div><div class="line">  <span class="keyword">static</span> resolve = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> defer = <span class="keyword">new</span> Defer();</div><div class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      defer.resolve(data);</div><div class="line">    &#125;)</div><div class="line">    <span class="keyword">return</span> defer;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">static</span> reject = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> defer = <span class="keyword">new</span> Defer();</div><div class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      defer.reject(data);</div><div class="line">    &#125;)</div><div class="line">    <span class="keyword">return</span> defer;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  defer = <span class="keyword">new</span> Defer();</div><div class="line"></div><div class="line">  <span class="keyword">constructor</span>(fn = () =&gt; &#123;&#125;) &#123;</div><div class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      fn.call(<span class="literal">null</span>, data =&gt; &#123;</div><div class="line">        <span class="keyword">this</span>.defer.resolve(data);</div><div class="line">      &#125;, data =&gt; &#123;</div><div class="line">        <span class="keyword">this</span>.defer.reject(data);</div><div class="line">      &#125;);</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.defer;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调用测试：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="built_in">Promise</span> <span class="keyword">from</span> <span class="string">'./promise'</span></div><div class="line"></div><div class="line"><span class="built_in">Promise</span>.resolve(<span class="string">'hello'</span>).then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(data));  <span class="comment">//立即输出"hello"</span></div><div class="line"></div><div class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    resolve(<span class="string">'world'</span>);</div><div class="line">  &#125;, <span class="number">2000</span>);</div><div class="line">&#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(data));   <span class="comment">//两秒后输出"world"</span></div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[callback、promise、async/await的使用]]></title>
      <url>http://mlxiao.com/2017/02/09/callback-promise-async-await/</url>
      <content type="html"><![CDATA[<p>以微信授权后的获取用户信息作为案例，分别用这三种方式实现</p>
<a id="more"></a>
<h2 id="主要流程"><a href="#主要流程" class="headerlink" title="主要流程"></a>主要流程</h2><p><em>code已知</em></p>
<ol>
<li>通过code换取accessToken，得到openId</li>
<li>通过openId拉取用户信息</li>
<li>打印拉取到的用户信息</li>
</ol>
<p><strong>此文只做简单的流程抽象，实际情况请参阅<a href="http://mp.weixin.qq.com/wiki/17/c0f37d5704f0b64713d5d2c37b468d75.html" target="_blank" rel="external">微信网页授权文档</a></strong></p>
<p>下文所有的http请求均使用<a href="https://github.com/bitinn/node-fetch" target="_blank" rel="external">node-fetch</a>发起</p>
<h2 id="callback方式"><a href="#callback方式" class="headerlink" title="callback方式"></a>callback方式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> fetch <span class="keyword">from</span> <span class="string">'node-fetch'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> code = <span class="string">"your code"</span>;</div><div class="line"><span class="keyword">const</span> accessTokenApi = <span class="string">"accessTokenApi"</span>;</div><div class="line"><span class="keyword">const</span> userInfoApi = <span class="string">"userInfoApi"</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAccessToken</span>(<span class="params">code, callback = (</span>) =&gt; </span>&#123;&#125;) &#123;</div><div class="line">  fetch(accessTokenApi + <span class="string">`?code=<span class="subst">$&#123;code&#125;</span>`</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> res.json()).then(<span class="function"><span class="params">body</span> =&gt;</span> &#123;</div><div class="line">    callback(<span class="literal">false</span>, body.accessToken);</div><div class="line">  &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> callback(error));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserInfo</span>(<span class="params">accessToken, callback = (</span>) =&gt; </span>&#123;&#125;) &#123;</div><div class="line">  fetch(userInfoApi + <span class="string">`?accessToken=<span class="subst">$&#123;accessToken&#125;</span>`</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> res.json()).then(<span class="function"><span class="params">body</span> =&gt;</span> &#123;</div><div class="line">    callback(<span class="literal">false</span>, body.userInfo);</div><div class="line">  &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> callback(error));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//调用</span></div><div class="line">(<span class="function"><span class="params">code</span> =&gt;</span> &#123;</div><div class="line">  getAccessToken(code, (error, accessToken) =&gt; &#123;</div><div class="line">    <span class="keyword">if</span> (error) <span class="keyword">return</span> <span class="built_in">console</span>.log(error);</div><div class="line">    getUserInfo(accessToken, (eror, userInfo) =&gt; &#123;</div><div class="line">      <span class="keyword">if</span> (error) <span class="keyword">return</span> <span class="built_in">console</span>.log(error);</div><div class="line">      <span class="built_in">console</span>.log(userInfo);</div><div class="line">    &#125;)</div><div class="line">  &#125;)</div><div class="line">&#125;)(code)</div></pre></td></tr></table></figure>
<h2 id="promise方式"><a href="#promise方式" class="headerlink" title="promise方式"></a>promise方式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> fetch <span class="keyword">from</span> <span class="string">'node-fetch'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> code = <span class="string">"your code"</span>;</div><div class="line"><span class="keyword">const</span> accessTokenApi = <span class="string">"accessTokenApi"</span>;</div><div class="line"><span class="keyword">const</span> userInfoApi = <span class="string">"userInfoApi"</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAccessToken</span>(<span class="params">code</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    fetch(accessTokenApi + <span class="string">`?code=<span class="subst">$&#123;code&#125;</span>`</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> res.json())</div><div class="line">      .then(<span class="function"><span class="params">body</span> =&gt;</span> resolve(body.accessToken))</div><div class="line">      .catch(<span class="function"><span class="params">error</span> =&gt;</span> reject(error));</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserInfo</span>(<span class="params">accessToken</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    fetch(userInfoApi + <span class="string">`?accessToken=<span class="subst">$&#123;accessToken&#125;</span>`</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> res.json())</div><div class="line">      .then(<span class="function"><span class="params">body</span> =&gt;</span> resolve(body.userInfo))</div><div class="line">      .catch(<span class="function"><span class="params">error</span> =&gt;</span> reject(error));</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//调用</span></div><div class="line">(<span class="function"><span class="params">code</span> =&gt;</span> &#123;</div><div class="line">  getAccessToken(code).then(<span class="function"><span class="params">accessToken</span> =&gt;</span> &#123;</div><div class="line">    getUserInfo(accessToken).then(<span class="function"><span class="params">userInfo</span> =&gt;</span> &#123;</div><div class="line">      <span class="built_in">console</span>.log(userInfo)</div><div class="line">    &#125;, error =&gt; <span class="built_in">console</span>.log(error))</div><div class="line">  &#125;, error =&gt; <span class="built_in">console</span>.log(eror))</div><div class="line">&#125;)(code)</div></pre></td></tr></table></figure>
<h2 id="async-await方式"><a href="#async-await方式" class="headerlink" title="async/await方式"></a>async/await方式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> fetch <span class="keyword">from</span> <span class="string">'node-fetch'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> code = <span class="string">"your code"</span>;</div><div class="line"><span class="keyword">const</span> accessTokenApi = <span class="string">"accessTokenApi"</span>;</div><div class="line"><span class="keyword">const</span> userInfoApi = <span class="string">"userInfoApi"</span>;</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getAccessToken</span>(<span class="params">code</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> body = <span class="keyword">await</span> fetch(accessTokenApi + <span class="string">`?code=<span class="subst">$&#123;code&#125;</span>`</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> res.json())</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(body.accessToken);  </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getUserInfo</span>(<span class="params">accessToken</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> body = <span class="keyword">await</span> fetch(userInfoApi + <span class="string">`?accessToken=<span class="subst">$&#123;accessToken&#125;</span>`</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> res.json());</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(body.userInfo);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//调用</span></div><div class="line">(<span class="keyword">async</span> code =&gt; &#123;</div><div class="line">  <span class="keyword">let</span> accessToken = <span class="keyword">await</span> getAccessToken(code);</div><div class="line">  <span class="keyword">let</span> userInfo = <span class="keyword">await</span> getUserInfo(accessToken);</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reslove(userInfo);</div><div class="line">&#125;)(code)</div><div class="line">  .then(<span class="function"><span class="params">userInfo</span> =&gt;</span> <span class="built_in">console</span>.log(userInfo))</div><div class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.log(error))</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[为nodejs配置babel]]></title>
      <url>http://mlxiao.com/2017/02/09/node-babel/</url>
      <content type="html"><![CDATA[<p>虽然新版本的nodejs支持了很多ES6新特性，但是想使用所有的新特性，就得使用<a href="https://babeljs.io/" target="_blank" rel="external">babel</a>编译一下</p>
<a id="more"></a>
<p><code>package.json</code><br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"node-demo"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="attr">"scripts"</span>: &#123;</div><div class="line">    <span class="attr">"babel-node"</span>: <span class="string">"babel-node"</span>,</div><div class="line">    <span class="attr">"start"</span>: <span class="string">"nodemon --exec npm run babel-node -- ./index"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"dependencies"</span>: &#123;</div><div class="line">    <span class="attr">"babel-cli"</span>: <span class="string">"^6.22.2"</span>,</div><div class="line">    <span class="attr">"babel-core"</span>: <span class="string">"^6.21.1"</span>,</div><div class="line">    <span class="attr">"babel-preset-latest"</span>: <span class="string">"^6.22.0"</span>,</div><div class="line">    <span class="attr">"babel-preset-stage-2"</span>: <span class="string">"^6.22.0"</span>,</div><div class="line">    <span class="attr">"nodemon"</span>: <span class="string">"^1.11.0"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>.babelrc</code><br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"presets"</span>: [<span class="string">"latest"</span>, <span class="string">"stage-2"</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p><code>index.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> foo = <span class="keyword">async</span> () =&gt; &#123;</div><div class="line">  <span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">reslove</span> =&gt;</span> &#123;</div><div class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      reslove(<span class="string">'haha'</span>);</div><div class="line">    &#125;, <span class="number">2000</span>)</div><div class="line">  &#125;)</div><div class="line">  <span class="keyword">let</span> res = <span class="keyword">await</span> promise;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(res);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">foo().then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res));</div></pre></td></tr></table></figure></p>
<p>测试： <code>npm start</code></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用webpack构建项目]]></title>
      <url>http://mlxiao.com/2017/02/08/webpack/</url>
      <content type="html"><![CDATA[<p>此文基于<a href="https://webpack.js.org/" target="_blank" rel="external">webpack2</a>，做为个人稳定使用的一套webpack配置，记录下来，以供参考。<br><small><em><a href="https://github.com/mlxiao93/webpack-demo" target="_blank" rel="external">查看源码</a></em></small></p>
<a id="more"></a>
<h2 id="webpack概念"><a href="#webpack概念" class="headerlink" title="webpack概念"></a>webpack概念</h2><p>webpack是一个模块化打包工具，使用js作为载体将所有静态资源打包在一起，支持的loader和plugin等能对各种静态资源进行预处理，极大地方便了前端的工程化开发。详情参考<a href="https://webpack.js.org/" target="_blank" rel="external">官网</a>，此处放张官网概念图：</p>
<p><img src="http://o86lf0oxm.bkt.clouddn.com/webpack-concept.svg" alt="webpack"></p>
<h2 id="构建流程"><a href="#构建流程" class="headerlink" title="构建流程"></a>构建流程</h2><h3 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h3><p><a href="https://nodejs.org" target="_blank" rel="external">nodejs</a><br><small><em>tips: 装好nodejs后可以使用<a href="https://npm.taobao.org/" target="_blank" rel="external">淘宝NPM镜像</a>替代官方版本</em><br><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></small></p>
<h3 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h3><h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><p>创建一个webpack-demo项目并生成package.json文件。<em>之后所有操作的根目录均为webpack-demo/</em><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkdir webpack-demo</div><div class="line"><span class="built_in">cd</span> webpack-demo</div><div class="line">npm init <span class="_">-f</span></div></pre></td></tr></table></figure></p>
<h4 id="引入webpack2"><a href="#引入webpack2" class="headerlink" title="引入webpack2"></a>引入webpack2</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm i -D webpack@beta</div></pre></td></tr></table></figure>
<p>  <img src="http://o86lf0oxm.bkt.clouddn.com/webpack-demo-01.png" alt="folder"></p>
<h4 id="项目初始结构分析"><a href="#项目初始结构分析" class="headerlink" title="项目初始结构分析"></a>项目初始结构分析</h4><ul>
<li>通常项目会分成三个运行环境：开发人员在本地跑的开发环境(dev)、测试人员用来做黑盒测试的测试环境(test)和线上运行的生产环境(production)。<br>简单起见，本文只考虑开发环境(dev)和生产环境(prod)，测试环境可以自行类比。</li>
<li><p>综上，webpack的配置需要有两套，同时两套配置必然会存在相同的部分，故新建目录与文件如下图：</p>
<p><img src="http://o86lf0oxm.bkt.clouddn.com/webpack-demo-03.png" alt="folder"></p>
<p>同时引入一个库<a href="https://github.com/survivejs/webpack-merge" target="_blank" rel="external">webpack-merge</a>用于合并base config和特定环境的config</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm i -D webpack-merge</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="开始写webpack-config"><a href="#开始写webpack-config" class="headerlink" title="开始写webpack config"></a>开始写webpack config</h4><p>  <span class="filename">webpack-config/base.js<span><br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="comment">//common config</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></span></span></p>
<p>  <span class="filename">webpack-config/dev.js, webpack-config/prod.js<span><br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> webpackMerge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>);</div><div class="line"><span class="keyword">const</span> base = <span class="built_in">require</span>(<span class="string">'./base'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = webpackMerge(base, &#123;</div><div class="line">  <span class="comment">//specific config</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></span></span></p>
<p>  <span class="filename">webpack.config.js<span><br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> devModule = <span class="built_in">require</span>(<span class="string">'./webpack-config/dev'</span>);</div><div class="line"><span class="keyword">const</span> prodModule = <span class="built_in">require</span>(<span class="string">'./webpack-config/prod'</span>);</div><div class="line"></div><div class="line"><span class="keyword">let</span> finalModule = &#123;&#125;;</div><div class="line"></div><div class="line"><span class="keyword">let</span> ENV = process.env.NODE_ENV;     <span class="comment">//此处变量可由命令行传入</span></div><div class="line"></div><div class="line"><span class="keyword">switch</span> (ENV) &#123;</div><div class="line">  <span class="keyword">case</span> <span class="string">'dev'</span>:</div><div class="line">    finalModule = devModule;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">  <span class="keyword">case</span> <span class="string">'prod'</span>:</div><div class="line">    finalModule = prodModule;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">  <span class="keyword">default</span>:</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = finalModule;</div></pre></td></tr></table></figure></span></span></p>
<h4 id="编写npm-scripts，区分环境"><a href="#编写npm-scripts，区分环境" class="headerlink" title="编写npm scripts，区分环境"></a>编写<a href="http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html" target="_blank" rel="external">npm scripts</a>，区分环境</h4><p>  <span class="filename">package.json<span><br>  <figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"webpack-demo"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="attr">"scripts"</span>: &#123;</div><div class="line">    <span class="attr">"dev"</span>: <span class="string">"cross-env NODE_ENV=dev webpack"</span>,</div><div class="line">    <span class="attr">"prod"</span>: <span class="string">"cross-env NODE_env=prod webpack"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"devDependencies"</span>: &#123;</div><div class="line">    <span class="attr">"webpack"</span>: <span class="string">"^2.2.0"</span>,</div><div class="line">    <span class="attr">"webpack-merge"</span>: <span class="string">"^2.6.1"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></span></span></p>
<p>  由于*unix和windows设置NODE_ENV的语句有所<a href="http://stackoverflow.com/questions/9249830/how-can-i-set-node-env-production-in-windows" target="_blank" rel="external">差异</a>，此处用到了一个库<a href="https://github.com/kentcdodds/cross-env" target="_blank" rel="external">cross-env</a>以达到兼容的目的<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm i -D cross-env</div></pre></td></tr></table></figure></p>
<h3 id="从dev环境写起"><a href="#从dev环境写起" class="headerlink" title="从dev环境写起"></a>从dev环境写起</h3><p>新建一个src目录用户存放项目源文件，同时在src下新建一个index.js作为打包的入口</p>
<h4 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h4><ul>
<li><p>安装<a href="https://webpack.js.org/guides/development/#webpack-dev-server" target="_blank" rel="external">webpack-dev-server</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm i -D webpack-dev-server</div></pre></td></tr></table></figure>
</li>
<li><p>配置webpack config<br><span class="filename">webpack-config/dev.js<span></span></span></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">module.exports = webpackMerge(base, &#123;</div><div class="line">  entry: process.cwd() + &apos;/src/index.js&apos;,</div><div class="line">  output: &#123;</div><div class="line">    filename: &apos;[name].bundle.js&apos;</div><div class="line">  &#125;,</div><div class="line">  devtool: &apos;eval-source-map&apos;   //enable srouce map</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>修改npm scripts<br><span class="filename">package.json<span></span></span></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"> ...</div><div class="line"> &quot;scripts&quot;: &#123;</div><div class="line">   &quot;dev&quot;: &quot;cross-env NODE_ENV=dev webpack-dev-server --inline --hot --host 0.0.0.0&quot;,</div><div class="line">   ...</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="htmlWebpackPlugins"><a href="#htmlWebpackPlugins" class="headerlink" title="htmlWebpackPlugins"></a>htmlWebpackPlugins</h4><p>src目录下新建一个index.html作为template，htmlWebpackPlugins会根据这个template生成网站的index.html，同时自动写入bundle依赖。<br>src下放一个favicon.ico作为网站的icon</p>
<ul>
<li><p>安装<a href="https://webpack.js.org/plugins/html-webpack-plugin/" target="_blank" rel="external">htmlWebpackPlugins</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm i -D html-webpack-plugin</div></pre></td></tr></table></figure>
</li>
<li><p>配置webpack config<br><span class="filename">webpack-config/dev.js<span></span></span></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">const HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</div><div class="line">...</div><div class="line">module.exports = webpackMerge(base, &#123;</div><div class="line">  ...</div><div class="line">  plugins: [</div><div class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</div><div class="line">      <span class="attr">filename</span>: <span class="string">'index.html'</span>,</div><div class="line">      <span class="attr">template</span>: process.cwd() + <span class="string">'/src/index.html'</span>,</div><div class="line">      <span class="attr">favicon</span>: process.cwd() + <span class="string">'/src/index.html'</span></div><div class="line">    &#125;)</div><div class="line">  ]</div><div class="line">  ...</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>到这一步算是完成了最基本的开发环境配置，命令行执行<code>npm run dev</code>，然后浏览器打开localhost:8080就能看到成果<br>将npm scripts中的<a href="https://docs.npmjs.com/cli/start" target="_blank" rel="external">start命令</a>指向npm run dev，这样每次开始开发只需要执行<code>npm start</code><br><span class="filename">package.json<span><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  ...</div><div class="line">  &quot;scripts&quot;: &#123;</div><div class="line">    ...</div><div class="line">    &quot;start&quot;: &quot;npm run dev&quot;</div><div class="line">    ...</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></span></span></p>
<h4 id="Loaders-Rules"><a href="#Loaders-Rules" class="headerlink" title="Loaders(Rules)"></a>Loaders(Rules)</h4><p>webpack本身只能处理js模块，如果需要处理其他类型的文件，就需要<a href="https://webpack.js.org/concepts/loaders/" target="_blank" rel="external">Loaders</a>进行转换</p>
<h5 id="ES6-支持"><a href="#ES6-支持" class="headerlink" title="ES6+支持"></a>ES6+支持</h5><p>ES6+虽然不能直接被浏览器全部识别，但是能用babel转换成ES5代码。</p>
<ul>
<li><p>安装babel编译相关依赖</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm i -D babel-core babel-preset-latest babel-preset-stage-2 babel-runtime babel-plugin-transform-runtime babel-loader</div></pre></td></tr></table></figure>
</li>
<li><p>新建.babelrc文件并写入:<br><span class="filename">.babelrc<span></span></span></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;presets&quot;: [&quot;latest&quot;, &quot;stage-2&quot;],</div><div class="line">  &quot;plugins&quot;: [&quot;transform-runtime&quot;]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>配置rules<br><span class="filename">webpack-config/dev.js<span></span></span></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">module.exports = webpackMerge(base, &#123;</div><div class="line">  ...</div><div class="line">  module: &#123;</div><div class="line">    rules: [</div><div class="line">      ...</div><div class="line">      &#123;</div><div class="line">        test: /\.js$/,</div><div class="line">        exclude: [/node_modules/],</div><div class="line">        loader: &apos;babel-loader&apos;</div><div class="line">      &#125;</div><div class="line">      ...</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="css处理"><a href="#css处理" class="headerlink" title="css处理"></a>css处理</h5><p>现如今css预处理器已经成为前端开发的标配，<a href="http://sass-lang.com/" target="_blank" rel="external">Sass(Scss)</a>,<a href="http://lesscss.org/" target="_blank" rel="external">Less</a>和<a href="http://stylus-lang.com/" target="_blank" rel="external">Stylus</a>各行其道，个人偏好scss。<br><a href="http://postcss.org/" target="_blank" rel="external">PostCss</a>可以作为一个后处理器，实现为css自动添加浏览器前缀等功能</p>
<ul>
<li><p>安装相关依赖</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm i -D style-loader css-loader postcss-loader autoprefixer node-sass sass-loader</div></pre></td></tr></table></figure>
</li>
<li><p>新建postcss.config.js<br><span class="filename">postcss.config.js<span></span></span></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">plugins</span>: [</div><div class="line">    <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)(&#123;<span class="attr">browsers</span>: [<span class="string">'last 2 versions'</span>, <span class="string">'iOS 7'</span>, <span class="string">'Firefox &gt; 20'</span>]&#125;)</div><div class="line">  ]</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>配置rules<br><span class="filename">webpack-config/dev.js<span></span></span></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">module.exports = webpackMerge(base, &#123;</div><div class="line">  ...</div><div class="line">  module: &#123;</div><div class="line">    rules: [</div><div class="line">      ...</div><div class="line">      &#123;</div><div class="line">        test: /\.scss$/,</div><div class="line">        exclude: [/node_modules/],</div><div class="line">        use: [</div><div class="line">          &apos;style-loader&apos;,</div><div class="line">          &#123;</div><div class="line">            loader: &apos;css-loader&apos;,</div><div class="line">            options: &#123;</div><div class="line">              sourceMap: true</div><div class="line">            &#125;</div><div class="line">          &#125;,</div><div class="line">          &apos;postcss-loader&apos;,</div><div class="line">          &#123;</div><div class="line">            loader: &apos;sass-loader&apos;,</div><div class="line">            options: &#123;</div><div class="line">              sourceMap: true</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">        ]</div><div class="line">      &#125;</div><div class="line">      ...</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="html模板、图片等的处理"><a href="#html模板、图片等的处理" class="headerlink" title="html模板、图片等的处理"></a>html模板、图片等的处理</h5><ul>
<li><p>安装相关依赖</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm i -D html-loader file-loader url-loader</div></pre></td></tr></table></figure>
</li>
<li><p>配置rules<br><span class="filename">webpack-config/dev.js<span></span></span></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">module.exports = webpackMerge(base, &#123;</div><div class="line">  ...</div><div class="line">  module: &#123;</div><div class="line">    rules: [</div><div class="line">      ...</div><div class="line">      &#123;</div><div class="line">        test: /\.html$/,</div><div class="line">        loader: &apos;html-loader&apos;,</div><div class="line">        options: &#123;</div><div class="line">          minimize: true</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        test: /\.(jpe?g|png|gif|svg)$/i,</div><div class="line">        loader: &apos;url-loader&apos;,</div><div class="line">        options: &#123;</div><div class="line">          limit: 10000,</div><div class="line">          hash: &apos;sha512&apos;,</div><div class="line">          publicPath: &apos;/&apos;,</div><div class="line">          name: &apos;assets/images/[hash].[ext]&apos;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      ...</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>至此，dev环境配置完成</strong></p>
<h3 id="配置production环境"><a href="#配置production环境" class="headerlink" title="配置production环境"></a>配置production环境</h3><h4 id="抽出公共部分"><a href="#抽出公共部分" class="headerlink" title="抽出公共部分"></a>抽出公共部分</h4><ul>
<li><p>entry可以共用，prod的output需要加上文件chunkhash用来刷新缓存,并将文件输出至dist目录<br><span class="filename">webpack-config/dev.js<span></span></span></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- entry: process.cwd() + <span class="string">'/src/index.js'</span>,</div></pre></td></tr></table></figure>
<p><span class="filename">webpack-config/base.js<span></span></span></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">entry</span>: process.cwd() + <span class="string">'/src/index.js'</span>,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><span class="filename">webpack-config/prod.js<span></span></span></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> webpackMerge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>);</div><div class="line"><span class="keyword">const</span> base = <span class="built_in">require</span>(<span class="string">'./base'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = webpackMerge(base, &#123;</div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="attr">filename</span>: <span class="string">'bundle.[chunkhash].js'</span>,</div><div class="line">    <span class="attr">path</span>: process.cwd() + <span class="string">'/dist'</span></div><div class="line">  &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>HtmlWebpackPlugin公共<br><span class="filename">webpack-config/dev.js<span></span></span></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">-<span class="keyword">new</span> HtmlWebpackPlugin(&#123;</div><div class="line">-  filename: <span class="string">'index.html'</span>,</div><div class="line">-  template: process.cwd() + <span class="string">'/src/index.html'</span>,</div><div class="line">-  favicon: process.cwd() + <span class="string">'/src/index.html'</span></div><div class="line">-&#125;)</div></pre></td></tr></table></figure>
<p><span class="filename">webpack-config/base.js<span></span></span></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  ...</div><div class="line">  plugins: [</div><div class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</div><div class="line">      <span class="attr">filename</span>: <span class="string">'index.html'</span>,</div><div class="line">      <span class="attr">template</span>: process.cwd() + <span class="string">'/src/index.html'</span>,</div><div class="line">      <span class="attr">favicon</span>: process.cwd() + <span class="string">'/src/index.html'</span></div><div class="line">    &#125;)</div><div class="line">  ],</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>js、html和图片loader公共，prod的css loader需要使用<a href="https://webpack.js.org/guides/code-splitting-css/#using-extract-text-webpack-plugin-extracttextplugin" target="_blank" rel="external">ExtractTextPlugin</a>将css从js中分离出来<br><span class="filename">webpack-config/dev.js<span></span></span></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">-&#123;</div><div class="line">-  test: <span class="regexp">/\.js$/</span>,</div><div class="line">-  exclude: [<span class="regexp">/node_modules/</span>],</div><div class="line">-  loader: <span class="string">'babel-loader'</span></div><div class="line">-&#125;</div><div class="line">...</div><div class="line">-&#123;</div><div class="line">-  test: <span class="regexp">/\.html$/</span>,</div><div class="line">-  loader: <span class="string">'html-loader'</span>,</div><div class="line">-  options: &#123;</div><div class="line">-    minimize: <span class="literal">true</span></div><div class="line">-  &#125;</div><div class="line">-&#125;,</div><div class="line">-&#123;</div><div class="line">-  test: <span class="regexp">/\.(jpe?g|png|gif|svg)$/i</span>,</div><div class="line">-  loader: <span class="string">'url-loader'</span>,</div><div class="line">-  options: &#123;</div><div class="line">-    limit: <span class="number">10000</span>,</div><div class="line">-    hash: <span class="string">'sha512'</span>,</div><div class="line">-    publicPath: <span class="string">'/'</span>,</div><div class="line">-    name: <span class="string">'assets/images/[hash].[ext]'</span></div><div class="line">-  &#125;</div><div class="line">-&#125;</div></pre></td></tr></table></figure>
<p><span class="filename">webpack-config/base.js<span></span></span></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">module.exports = &#123;</div><div class="line">  ...</div><div class="line">  module: &#123;</div><div class="line">    <span class="attr">rules</span>: [</div><div class="line">      &#123;</div><div class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</div><div class="line">        <span class="attr">exclude</span>: [<span class="regexp">/node_modules/</span>],</div><div class="line">        <span class="attr">loader</span>: <span class="string">'babel-loader'</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="attr">test</span>: <span class="regexp">/\.html$/</span>,</div><div class="line">        <span class="attr">loader</span>: <span class="string">'html-loader'</span>,</div><div class="line">        <span class="attr">options</span>: &#123;</div><div class="line">          <span class="attr">minimize</span>: <span class="literal">true</span></div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="attr">test</span>: <span class="regexp">/\.(jpe?g|png|gif|svg)$/i</span>,</div><div class="line">        <span class="attr">loader</span>: <span class="string">'url-loader'</span>,</div><div class="line">        <span class="attr">options</span>: &#123;</div><div class="line">          <span class="attr">limit</span>: <span class="number">10000</span>,</div><div class="line">          <span class="attr">hash</span>: <span class="string">'sha512'</span>,</div><div class="line">          <span class="attr">publicPath</span>: <span class="string">'/'</span>,</div><div class="line">          <span class="attr">name</span>: <span class="string">'assets/images/[hash].[ext]'</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm i -D extract-text-webpack-plugin@beta</div></pre></td></tr></table></figure>
<p><span class="filename">webpack-config/prod.js<span></span></span></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">const ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">"extract-text-webpack-plugin"</span>);</div><div class="line">...</div><div class="line">module: &#123;</div><div class="line">  <span class="attr">rules</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">test</span>: <span class="regexp">/\.scss$/</span>,</div><div class="line">      <span class="attr">exclude</span>: [<span class="regexp">/node_modules/</span>],</div><div class="line">      <span class="attr">use</span>: ExtractTextPlugin.extract(&#123;</div><div class="line">        <span class="attr">fallback</span>: <span class="string">'style-loader'</span>,</div><div class="line">        <span class="attr">use</span>: [</div><div class="line">          &#123;</div><div class="line">            <span class="attr">loader</span>: <span class="string">'css-loader'</span>,</div><div class="line">            <span class="attr">options</span>: &#123;</div><div class="line">              <span class="attr">minimize</span>: <span class="literal">true</span></div><div class="line">            &#125;</div><div class="line">          &#125;,</div><div class="line">          <span class="string">'postcss-loader'</span>,</div><div class="line">          <span class="string">'sass-loader'</span></div><div class="line">        ]</div><div class="line">      &#125;)</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;,</div><div class="line">...</div><div class="line">plugins: [</div><div class="line">  <span class="keyword">new</span> ExtractTextPlugin(&#123;</div><div class="line">    <span class="attr">filename</span>: <span class="string">"bundle.[chunkhash].css"</span></div><div class="line">  &#125;)</div><div class="line">],</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="production环境的其它处理"><a href="#production环境的其它处理" class="headerlink" title="production环境的其它处理"></a>production环境的其它处理</h4><h5 id="使用UglifyJsPlugin压缩js"><a href="#使用UglifyJsPlugin压缩js" class="headerlink" title="使用UglifyJsPlugin压缩js"></a>使用<a href="https://webpack.js.org/plugins/uglifyjs-webpack-plugin/#uglifyjs-webpack-plugin" target="_blank" rel="external">UglifyJsPlugin</a>压缩js</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm i - D uglifyjs-webpack-plugin</div></pre></td></tr></table></figure>
<p><span class="filename">webpack-config/prod.js<span><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">const UglifyJSPlugin = <span class="built_in">require</span>(<span class="string">'uglifyjs-webpack-plugin'</span>);</div><div class="line">...</div><div class="line">module.exports = webpackMerge(base, &#123;</div><div class="line">  ...</div><div class="line">  const webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line">  ...</div><div class="line">  plugins: [</div><div class="line">    ...</div><div class="line">    new UglifyJSPlugin(&#123;</div><div class="line">      <span class="attr">compress</span>: &#123;</div><div class="line">        <span class="attr">warnings</span>: <span class="literal">false</span>,</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">output</span>: &#123;</div><div class="line">        <span class="attr">comments</span>: <span class="literal">false</span></div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">    ...</div><div class="line">  ]</div><div class="line">  ...</div><div class="line">&#125;)</div><div class="line">...</div></pre></td></tr></table></figure></span></span></p>
<h5 id="使用CleanWebpackPlugin清空output目录"><a href="#使用CleanWebpackPlugin清空output目录" class="headerlink" title="使用CleanWebpackPlugin清空output目录"></a>使用<a href="https://github.com/johnagan/clean-webpack-plugin" target="_blank" rel="external">CleanWebpackPlugin</a>清空output目录</h5><p>构建前先清空，防止出现垃圾文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm i -D clean-webpack-plugin</div></pre></td></tr></table></figure></p>
<p><span class="filename">webpack-config/prod.js<span><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">module.exports = webpackMerge(base, &#123;</div><div class="line">  ...</div><div class="line">  plugins: [</div><div class="line">    ...</div><div class="line">    const CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);</div><div class="line">    ...</div><div class="line">    new CleanWebpackPlugin([<span class="string">'dist'</span>], &#123;</div><div class="line">      <span class="attr">root</span>: process.cwd(),</div><div class="line">      <span class="attr">exclude</span>: []</div><div class="line">    &#125;)</div><div class="line">    ...</div><div class="line">  ]</div><div class="line">  ...</div><div class="line">&#125;)</div><div class="line">...</div></pre></td></tr></table></figure></span></span></p>
<p><strong>至此，production环境配置完毕，同时抽出了公共部分</strong></p>
<h3 id="配置resolve-alias"><a href="#配置resolve-alias" class="headerlink" title="配置resolve.alias"></a>配置<a href="https://webpack.js.org/configuration/resolve/#resolve-alias" target="_blank" rel="external">resolve.alias</a></h3><ul>
<li><p>开发的时候如果有一个很深的目录比如：src/a/b/c/d/, 然后在d目录下的一个模块需要引入a目录下的模块，需要这样写：<code>import &#39;../../../some-module&#39;</code>，为了方便可以配置一个为src目录配置一个alias，这样模块引入只需要这样写：<code>import src/a/some-module</code>。<br><span class="filename">webpack-config/base.js<span></span></span></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">const path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line">...</div><div class="line">module.exports = &#123;</div><div class="line">  ...</div><div class="line">  resolve: &#123;</div><div class="line">    <span class="attr">extensions</span>: [<span class="string">'.js'</span>],</div><div class="line">    <span class="attr">alias</span>: &#123;</div><div class="line">      <span class="attr">src</span>: path.resolve(__dirname, <span class="string">'./../src'</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>通常dev环境和production环境的配置参数比如api domain会有差异，所以需要利用alias将用户两个环境配置文件区分开来<br><em>src目录下新建config目录，src/config目录下新增三个文件：base.js、dev.js、prod.js</em><br><span class="filename">webpack-config/base.js<span></span></span></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  <span class="attr">version</span>: <span class="string">'1.0.0'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><span class="filename">webpack-config/dev.js<span></span></span></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> base <span class="keyword">from</span> <span class="string">'./base'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  ...base,</div><div class="line">  <span class="attr">env</span>: <span class="string">'dev'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><span class="filename">webpack-config/prod.js<span></span></span></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> base <span class="keyword">from</span> <span class="string">'./base'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  ...base,</div><div class="line">  <span class="attr">env</span>: <span class="string">'prod'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em>配置alias</em><br><span class="filename">webpack-config/dev.js<span></span></span></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">const path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line">...</div><div class="line">module.exports = webpackMerge(base, &#123;</div><div class="line">  ...</div><div class="line">  resolve: &#123;</div><div class="line">    <span class="attr">alias</span>: &#123;</div><div class="line">      <span class="attr">config</span>: path.resolve(__dirname, <span class="string">'./../src/config/dev.js'</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">&#125;)</div><div class="line">...</div></pre></td></tr></table></figure>
<p><span class="filename">webpack-config/prod.js<span></span></span></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">const path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line">...</div><div class="line">module.exports = webpackMerge(base, &#123;</div><div class="line">  ...</div><div class="line">  resolve: &#123;</div><div class="line">    <span class="attr">alias</span>: &#123;</div><div class="line">      <span class="attr">config</span>: path.resolve(__dirname, <span class="string">'./../src/config/prod.js'</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">&#125;)</div><div class="line">...</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="最终成果"><a href="#最终成果" class="headerlink" title="最终成果"></a>最终成果</h2><p><a href="https://github.com/mlxiao93/webpack-demo" target="_blank" rel="external">https://github.com/mlxiao93/webpack-demo</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[css3 flex]]></title>
      <url>http://mlxiao.com/2017/02/07/css-flex/</url>
      <content type="html"><![CDATA[<p>flex作为css3引入的一种布局方式，简化了前端开发。现阶段移动端已经可以放心使用了，pc端不考虑老旧IE的话也是个最好的选择</p>
<a id="more"></a>
<h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><p><a href="http://caniuse.com/" target="_blank" rel="external">can i use</a><br><img src="http://o86lf0oxm.bkt.clouddn.com/blog-css-flex-01.png" alt="compatibility"></p>
<p>实际上可以通过特定语法-ms-flexbox，使IE10及以上兼容</p>
<h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><p>任何一个元素都能通过:<code>display: flex</code>指定为flex box，flex box的直接子元素则变成flex item</p>
<h3 id="flex-box-属性"><a href="#flex-box-属性" class="headerlink" title="flex box 属性"></a>flex box 属性</h3><ul>
<li><p><code>flex-direction: row | row-reverse | column | column-reverse;</code><br>指定flex item的排列方向</p>
</li>
<li><p><code>flex-wrap: nowrap | wrap | wrap-reverse;</code><br>flex item是否换行以及换行的方式</p>
</li>
<li><p><code>flex-flow: {flex-direction} {flex-wrap};</code><br>flex-direction和flex-wrap的合并写法，例如：<code>flex-flow: row nowrap</code></p>
</li>
<li><p><code>justify-content: flex-start | flex-end | center | space-between | space-around;</code><br>指定flex item在flex-direction方向上的对齐方式</p>
</li>
<li><p><code>align-items: flex-start | flex-end | center | baseline | stretch;</code><br>指定flex item在垂直于flex-direction方向上的对齐方式</p>
</li>
<li><p><code>align-content: align-content: flex-start | flex-end | center | space-between | space-around | stretch;</code><br>如果flex item发生换行，该属性可以指定各行之间的对齐方式</p>
</li>
</ul>
<h3 id="flex-item-属性"><a href="#flex-item-属性" class="headerlink" title="flex item 属性"></a>flex item 属性</h3><ul>
<li><p><code>order: {number=0}</code><br>指定flex item的排列权值，值越小，排列越靠前</p>
</li>
<li><p><code>flex-grow: {number=0}</code><br>flex box在flex-direction方向上有剩余空间时，指定flex item的放大权值</p>
</li>
<li><p><code>flex-shrink: {number=1};</code><br>flex box在flex-direction方向上空间不足时，指定flex item的缩小权值</p>
</li>
<li><p><code>flex-basis: {length=auto}  /* length和width或height类似 */</code><br>flex box在flex-direction方向上有剩余空间时，指定flex item占据的固定空间</p>
</li>
<li><p><code>flex: {flex-grow} {flex-shrink} {flex-basis}</code><br>flex-grow、flex-shrink、flex-basis的合并写法，该属性有两个快捷值：auto(1 1 auto)和none(0 0 auto)</p>
</li>
<li><p><code>align-self: auto | flex-start | flex-end | center | baseline | stretch;</code><br>可覆盖flex box的align-items属性，效果也一样，只不过只作用于当前flex item</p>
</li>
</ul>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="居中对齐"><a href="#居中对齐" class="headerlink" title="居中对齐"></a>居中对齐</h3><p></p><p data-height="265" data-theme-id="0" data-slug-hash="rjrbQe" data-default-tab="css,result" data-user="mlxiao93" data-embed-version="2" data-pen-title="h-v-center" class="codepen">See the Pen <a href="http://codepen.io/mlxiao93/pen/rjrbQe/" target="_blank" rel="external">h-v-center</a> by mlxiao93 (<a href="http://codepen.io/mlxiao93" target="_blank" rel="external">@mlxiao93</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>

<h3 id="经典三栏布局"><a href="#经典三栏布局" class="headerlink" title="经典三栏布局"></a>经典三栏布局</h3><p>两侧定宽，中间自适应</p>
<p></p><p data-height="265" data-theme-id="0" data-slug-hash="LxBoWm" data-default-tab="css,result" data-user="mlxiao93" data-embed-version="2" data-pen-title="LxBoWm" class="codepen">See the Pen <a href="http://codepen.io/mlxiao93/pen/LxBoWm/" target="_blank" rel="external">LxBoWm</a> by mlxiao93 (<a href="http://codepen.io/mlxiao93" target="_blank" rel="external">@mlxiao93</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>

<h3 id="骰子"><a href="#骰子" class="headerlink" title="骰子"></a>骰子</h3><p></p><p data-height="316" data-theme-id="0" data-slug-hash="ggdRym" data-default-tab="html,result" data-user="mlxiao93" data-embed-version="2" data-pen-title="ggdRym" class="codepen">See the Pen <a href="http://codepen.io/mlxiao93/pen/ggdRym/" target="_blank" rel="external">ggdRym</a> by mlxiao93 (<a href="http://codepen.io/mlxiao93" target="_blank" rel="external">@mlxiao93</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>

<p>此处的立体效果用到了一个关键的css3属性：<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/perspective" target="_blank" rel="external">perspective</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[css之BFC]]></title>
      <url>http://mlxiao.com/2017/02/07/css-bfc/</url>
      <content type="html"><![CDATA[<p>BFC是什么，block formatting context，翻译下来就是块级格式化上下文，那么它到底是什么?<br>新建一个html，在body下写一个div，div里写一个p标签，p标签内写上大名鼎鼎的”Hello world”，然后给div加上一个背景色，然后神奇的事情发生了：</p>
<a id="more"></a>
<p><img src="http://o86lf0oxm.bkt.clouddn.com/blog-css-bfc-01.png" alt="demo"><br>去掉body的默认margin后，背景色居然没有从顶部开始，其实这个问题就可以用BFC来解决</p>
<h2 id="官方解释：BFC"><a href="#官方解释：BFC" class="headerlink" title="官方解释：BFC"></a>官方解释：<a href="https://www.w3.org/TR/CSS2/visuren.html#block-formatting" target="_blank" rel="external">BFC</a></h2><p>个人理解：（参考<a href="http://www.html-js.com/article/1866" target="_blank" rel="external">这篇博文</a>）<br>1 在一个BFC中，盒子从包含块的顶端开始垂直地一个接一个地排列，两个盒子之间的垂直的间隙是由他们的margin 值所决定的。两个相邻的块级盒子的垂直外边距会发生重叠。<br>2 在BFC中，每一个盒子的margin会触碰到容器的border<br><small><em>注：盒子可以理解为一个块级元素</em></small></p>
<h2 id="BFC创建条件"><a href="#BFC创建条件" class="headerlink" title="BFC创建条件"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context" target="_blank" rel="external">BFC创建条件</a></h2><p><small><em>摘抄自MDN：</em></small></p>
<blockquote>
<p>块格式化上下文（block formatting context） 是Web页面的可视CSS渲染的一部分。它是块盒子的布局发生及浮动体彼此交互的区域。<br>块格式化上下文由以下之一创建：</p>
<ul>
<li>根元素或其它包含它的元素</li>
<li>浮动 (元素的 float 不是 none)</li>
<li>绝对定位的元素 (元素具有 position 为 absolute 或 fixed)</li>
<li>内联块 inline-blocks (元素具有 display: inline-block)</li>
<li>表格单元格 (元素具有 display: table-cell，HTML表格单元格默认属性)</li>
<li>表格标题 (元素具有 display: table-caption, HTML表格标题默认属性)</li>
<li>块元素 元素具有overflow 值不是 visible</li>
<li>弹性盒子 flex boxes (元素具有display: flex 或 inline-flex)</li>
<li>display: flow-root</li>
</ul>
</blockquote>
<h2 id="margin重叠问题"><a href="#margin重叠问题" class="headerlink" title="margin重叠问题"></a><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing" target="_blank" rel="external">margin重叠问题</a></h2><p>块级父元素的margin会和第一(最后)一个块级子元素的margin发生重叠</p>
<p>这个问题其实就是本文开头提出的问题：p标签默认有一个margin值，和包裹p标签的div标签的margin发生重叠，使div也有了一个margin值。解决这个问题的办法就是使用上述<a href="#BFC创建条件">BFC创建条件</a>中的任意一种方法使div形成一个BFC就行了。(可以给div设一个”overflow: auto”)</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[debounce和throttle函数]]></title>
      <url>http://mlxiao.com/2017/02/05/debounce-and-throttle/</url>
      <content type="html"><![CDATA[<p>前端开发中某些dom事件的触发频率非常高，有时候监听这些事件的函数并不需要那么高的执行频率，此时就得用上这两个函数</p>
<a id="more"></a>
<h2 id="debounce"><a href="#debounce" class="headerlink" title="debounce"></a>debounce</h2><p>防抖函数<br>应用场景：auto complete, 监听onchange并从后台拉取建议，需要等待用户输入完毕(规定时间内没有输入)再调用后台</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, timeout</span>) </span>&#123;</div><div class="line">  timeout = timeout || <span class="number">0</span>;</div><div class="line">  <span class="keyword">var</span> timer;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> _args = <span class="built_in">arguments</span>;</div><div class="line">    <span class="keyword">let</span> self = <span class="keyword">this</span>;</div><div class="line">    timer &amp;&amp; clearTimeout(timer);</div><div class="line">    timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      fn.apply(self, _args);</div><div class="line">    &#125;, timeout);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="throttle"><a href="#throttle" class="headerlink" title="throttle"></a>throttle</h2><p>节流函数<br>应用场景：轮播图的翻页，假如翻页动画的执行时间是400ms，为了防止用户快速重复点击导致bug，可以使用该函数设置400ms内只能执行一次翻页<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, timeout, execLast</span>) </span>&#123;    <span class="comment">//execLast: 是否执行最后一次触发，若最后一次触发在上一次执行的timeout内，默认不执行</span></div><div class="line">  timeout = timeout || <span class="number">0</span>;</div><div class="line">  <span class="keyword">let</span> lastExecTime = <span class="number">0</span>;</div><div class="line">  <span class="keyword">var</span> timer;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    timer &amp;&amp; clearTimeout(timer);</div><div class="line">    <span class="keyword">let</span> _args = <span class="built_in">arguments</span>;</div><div class="line">    <span class="keyword">let</span> self = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (execLast) &#123;</div><div class="line">      timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        lastExecTime = <span class="built_in">Date</span>.now();</div><div class="line">        fn.apply(self, _args);</div><div class="line">      &#125;, timeout);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">Date</span>.now() - lastExecTime &lt; timeout) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">    lastExecTime = <span class="built_in">Date</span>.now();</div><div class="line">    fn.apply(self, _args);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>用一个形象的例子比喻：debounce是一辆人满发车的黑车，throttle则是定时发车的公交车</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[实现LazyMan]]></title>
      <url>http://mlxiao.com/2017/02/05/lazy-man/</url>
      <content type="html"><![CDATA[<p>LazyMan是一道经典的javascript流程控制问题</p>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">LazyMan(&apos;Hank&apos;)</div><div class="line">//log：Hi, this is Hank</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">LazyMan(&apos;Hank&apos;).eat(&apos;super&apos;).eat(&apos;dinner&apos;)</div><div class="line">//log: Hi, this is Hank</div><div class="line">//log: Eat super</div><div class="line">//log: Eat dinner</div></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">LazyMan(&apos;Hank&apos;).sleep(5).eat(&apos;dinner&apos;)</div><div class="line">//log: Hi! This is Hank</div><div class="line">//等待3秒..</div><div class="line">//log: Wake up after 5 seconds</div><div class="line">//log: Eat dinner</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">LazyMan(&apos;Hank&apos;).sleepFirst(5).eat(&apos;dinner&apos;)</div><div class="line">//等待3秒</div><div class="line">//log: Wake up after 5 seconds</div><div class="line">//log: Hi, this is Hank</div><div class="line">//log: Eat dinner</div></pre></td></tr></table></figure>
<h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><ul>
<li>根据调用形式，LazyMan是一个工厂函数，返回用于实现逻辑的类的对象</li>
<li>sleep/sleepFirst会阻塞链式调用，所以所有的方法执行语句(任务)都应该先保存起来，在某个时机统一依次执行</li>
<li>使用一个队列（用数组模拟）保存任务，并提供一个execNextJob方法，当一个任务执行完后调用execNextJob可以执行下一个任务</li>
<li>sleepFisrt会首先执行，所以sleepFisrt的任务需要保存在队列的最前</li>
<li>任务的开始(首次调用execNextJob)在构造函数内，同时要保证任务开始前，所有任务都已经存入队列，所以首次调用next需要放在setTimeout函数内(此处需要理解<a href="http://www.alloyteam.com/2015/10/turning-to-javascript-series-from-settimeout-said-the-event-loop-model/" target="_blank" rel="external">setTimeout的执行机制</a>)</li>
</ul>
<h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">_LazyMan</span> (<span class="params">name</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.jobQueue = [];</div><div class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">  <span class="keyword">this</span>.jobQueue.unshift(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Hi, this is '</span> + name);</div><div class="line">    self.execNextJob();</div><div class="line">  &#125;)</div><div class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    self.execNextJob()</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">_LazyMan.prototype.execNextJob = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> job = <span class="keyword">this</span>.jobQueue.pop();</div><div class="line">  job &amp;&amp; job();</div><div class="line">&#125;</div><div class="line"></div><div class="line">_LazyMan.prototype.eat = <span class="function"><span class="keyword">function</span> (<span class="params">food</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">  <span class="keyword">this</span>.jobQueue.unshift(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Eat '</span> + food)</div><div class="line">    self.execNextJob();</div><div class="line">  &#125;);</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">_LazyMan.prototype.sleep = <span class="function"><span class="keyword">function</span> (<span class="params">seconds</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">  <span class="keyword">this</span>.jobQueue.unshift(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'Wake up after '</span> + seconds + <span class="string">' seconds'</span>);</div><div class="line">      self.execNextJob();</div><div class="line">    &#125;, seconds * <span class="number">1000</span>);</div><div class="line">  &#125;);</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">_LazyMan.prototype.sleepFirst = <span class="function"><span class="keyword">function</span> (<span class="params">seconds</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">  <span class="keyword">this</span>.jobQueue.push(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;     <span class="comment">//插队</span></div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'Wake up after '</span> + seconds + <span class="string">' seconds'</span>);</div><div class="line">      self.execNextJob();</div><div class="line">    &#125;, seconds * <span class="number">1000</span>);</div><div class="line">  &#125;)</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">LazyMan</span> (<span class="params">name</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> _LazyMan(name)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JS实现继承]]></title>
      <url>http://mlxiao.com/2017/02/04/js-extend/</url>
      <content type="html"><![CDATA[<h2 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h2><p>子类的原型指向父类的对象</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sup</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.foo = &#123;<span class="attr">name</span>: <span class="string">'hello'</span>&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line">Sub.prototype = <span class="keyword">new</span> Sup();</div><div class="line"></div><div class="line"><span class="comment">/* ---test--- */</span></div><div class="line"><span class="keyword">var</span> sub = <span class="keyword">new</span> Sub();</div><div class="line"><span class="built_in">console</span>.log(sub.foo.name);    <span class="comment">//hello</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p><em>缺点: 引用类型的成员会被所有子类的对象共享</em><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Sub();</div><div class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> Sub();</div><div class="line">b.foo.name = <span class="string">"world"</span>;</div><div class="line"><span class="built_in">console</span>.log(a.foo.name, b.foo.name);   <span class="comment">//world world</span></div></pre></td></tr></table></figure></p>
<h2 id="借用构造函数"><a href="#借用构造函数" class="headerlink" title="借用构造函数"></a>借用构造函数</h2><p>利用<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply" target="_blank" rel="external">apply函数</a>拷贝父类的成员</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sup</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.foo = &#123;<span class="attr">name</span>: <span class="string">'hello'</span>&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  Sup.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/* ---test--- */</span></div><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Sub();</div><div class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> Sub();</div><div class="line">b.foo.name = <span class="string">"world"</span>;</div><div class="line"><span class="built_in">console</span>.log(a.foo.name, b.foo.name);   <span class="comment">//hello world</span></div></pre></td></tr></table></figure>
<p><em>缺点：无法继承父类原型上的成员</em></p>
<h2 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h2><p>结合<a href="#原型链继承">原型链继承</a>和<a href="#借用构造函数">借用构造函数</a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sup</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.foo = &#123;<span class="attr">name</span>: <span class="string">'hello'</span>&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  Sup.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</div><div class="line">&#125;;</div><div class="line">Sub.prototype = <span class="keyword">new</span> Sup();</div></pre></td></tr></table></figure></p>
<p><em>缺点：父类的构造函数被调用了两次</em></p>
<h2 id="寄生组合继承"><a href="#寄生组合继承" class="headerlink" title="寄生组合继承"></a>寄生组合继承</h2><ol>
<li><a href="#借用构造函数">借用构造函数</a></li>
<li>创建一个辅助函数使其原型指向父类的原型，新建一个该辅助函数的对象(该对象继承父类原型)</li>
<li>将该对象的constructor属性指向子类</li>
<li>将该对象作为子类的原型</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sup</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.foo = &#123;<span class="attr">name</span>: <span class="string">'hello'</span>&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  Sup.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);   <span class="comment">// step 1</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// step 2</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Temp</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">Temp.prototype = Sup.prototype;</div><div class="line"><span class="keyword">let</span> temp = <span class="keyword">new</span> Temp();</div><div class="line"></div><div class="line">temp.constructor = Sub;  <span class="comment">// step 3</span></div><div class="line"></div><div class="line">Sub.prototype = temp;  <span class="comment">// step 4</span></div></pre></td></tr></table></figure>
<h2 id="ES6继承"><a href="#ES6继承" class="headerlink" title="ES6继承"></a>ES6继承</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sup</span> </span>&#123;&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Sup</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[排序算法]]></title>
      <url>http://mlxiao.com/2017/02/04/sort-algorithm/</url>
      <content type="html"><![CDATA[<p>使用js实现一些基础排序算法</p>
<a id="more"></a>
<blockquote>
<p>交换函数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">arr, i, j</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> tmp = arr[i];</div><div class="line">  arr[i] = arr[j];</div><div class="line">  arr[j] = tmp;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><ul>
<li>每次选出最小的元素</li>
<li>不稳定排序(比如 [5, 5, 2], 第一次交换就会把第一个5放到第二个5后面)</li>
<li>时间复杂度：O(n^2)</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectionSort</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> len = arr.length;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;     <span class="comment">//依次选出 n-1 个小的，第 n 个就是最大的</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</div><div class="line">      <span class="keyword">if</span> (arr[j] &lt; arr[min]) min = j;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (min !== i) swap(arr, i, min);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> arr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><ul>
<li>将元素插入有序数组</li>
<li>稳定排序</li>
<li>时间复杂度：O(n) ~ O(n^2)</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertionSort</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> len = arr.length;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</div><div class="line">    <span class="comment">//将arr[i] 插入到 arr[i - 1]、arr[i - 2]、arr[i - 3]...之中</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = i; j &gt; <span class="number">0</span>; j--) &#123;  </div><div class="line">      <span class="keyword">if</span> (arr[j] &lt; arr[j - <span class="number">1</span>]) swap(arr, j, j - <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> arr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><ul>
<li>相邻两个元素作比较，每次冒出一个极值</li>
<li>稳定排序</li>
<li>时间复杂度：O(n) ~ O(n^2)</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> len = arr.length;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++) &#123;</div><div class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) swap(arr, j, j + <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> arr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><ul>
<li>基于插入排序</li>
<li>不稳定排序</li>
<li>选择一个间隔h作为步长，将间隔为h的元素进行插入排序，递减h至1</li>
<li>时间复杂度：最好情况是O(n)，最坏情况视步长而定(<a href="http://vickyqi.com/2015/08/13/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/" target="_blank" rel="external">参考</a>)</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">shellSort</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> len = arr.length,</div><div class="line">      step = <span class="built_in">Math</span>.floor(len / <span class="number">3</span>);</div><div class="line">  <span class="keyword">while</span>(step &gt; <span class="number">0</span>) &#123; <span class="comment">//对间隔为 step 的元素进行插入排序</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = step; i &lt; len; i++) &#123;</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> j = i; j &gt;= step; j--) &#123;</div><div class="line">        <span class="keyword">if</span> (arr[j] &lt; arr[j - step]) swap(arr, j, j - step);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    step = <span class="built_in">Math</span>.floor(step / <span class="number">3</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> arr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><ul>
<li>递归地将数组分成两半分别排序，然后将结果归并起来</li>
<li>稳定排序</li>
<li>时间复杂度：O(nlogn)</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//原地归并方法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">arr, low, mid, high</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> aux = [];</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = low; i &lt;= high; i++) aux[i] = arr[i];  <span class="comment">//复制arr到aux</span></div><div class="line"></div><div class="line">  <span class="keyword">var</span> left = low,</div><div class="line">      right = mid + <span class="number">1</span>;</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = low; i &lt;= high; i++) &#123;   <span class="comment">//归并aux到arr</span></div><div class="line">    <span class="keyword">if</span> (left &gt; mid) &#123;       <span class="comment">//左边归并完成</span></div><div class="line">      arr[i] = aux[right++];</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (right &gt; high) &#123;    <span class="comment">//右边归并完成</span></div><div class="line">      arr[i] = aux[left++];</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (aux[left] &lt; aux[right]) &#123;  <span class="comment">//左边小于右边</span></div><div class="line">      arr[i] = aux[left++];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;          <span class="comment">//右边小于左边</span></div><div class="line">      arr[i] = aux[right++];</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSort</span>(<span class="params">arr, low, high</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (low === <span class="literal">undefined</span>) low = <span class="number">0</span>;</div><div class="line">  <span class="keyword">if</span> (high === <span class="literal">undefined</span>) high = arr.length - <span class="number">1</span>;</div><div class="line">  <span class="keyword">if</span> (low &gt;= high) <span class="keyword">return</span>;</div><div class="line">  <span class="keyword">var</span> mid = <span class="built_in">Math</span>.floor((low + high) / <span class="number">2</span>);</div><div class="line">  mergeSort(arr, low, mid);</div><div class="line">  mergeSort(arr, mid + <span class="number">1</span>, high);</div><div class="line">  merge(arr, low, mid, high);</div><div class="line">  <span class="keyword">return</span> arr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><ul>
<li>以升序为例，选择一个元素，所有比该元素小的放左边，大的放右边，再对两边分别递归调用</li>
<li>不稳定排序</li>
<li>时间复杂度：O(nlogn)</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//选择一个元素（哨兵）对数组切分，小的放前面，大的放后面（升序）</span></div><div class="line"><span class="comment">//返回切分后哨兵的索引</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">splition</span>(<span class="params">arr, low, high</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> left = low,</div><div class="line">      right = high,</div><div class="line">      midVal = arr[left];  <span class="comment">//哨兵</span></div><div class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;   <span class="comment">//扫描左右，检查扫描是否结束</span></div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;  <span class="comment">//从左边开始扫描，找出比哨兵大的</span></div><div class="line">      <span class="keyword">if</span> (left &gt; right || arr[left] &gt; midVal) <span class="keyword">break</span>;</div><div class="line">      left++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;  <span class="comment">//从右边开始扫描，找出比哨兵小的</span></div><div class="line">      <span class="keyword">if</span> (right &lt; left || arr[right] &lt; midVal) <span class="keyword">break</span>;</div><div class="line">      right--;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (left &gt;= right) <span class="keyword">break</span>;   <span class="comment">//左边没找到比哨兵小的或者右边没找到比哨兵大的</span></div><div class="line">    swap(arr, left, right)   <span class="comment">//交换左右找到的元素</span></div><div class="line">  &#125;</div><div class="line">  left--;    <span class="comment">//切分后哨兵的索引</span></div><div class="line">  swap(arr, low, left);</div><div class="line">  <span class="keyword">return</span> left;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr, low, high</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (low === <span class="literal">undefined</span>) low = <span class="number">0</span>;</div><div class="line">  <span class="keyword">if</span> (high === <span class="literal">undefined</span>) high = arr.length - <span class="number">1</span>;</div><div class="line">  <span class="keyword">if</span> (low &gt;= high) <span class="keyword">return</span>;</div><div class="line">  <span class="keyword">var</span> split = splition(arr, low, high);</div><div class="line">  quickSort(arr, low, split - <span class="number">1</span>);</div><div class="line">  quickSort(arr, split + <span class="number">1</span>, high);</div><div class="line">  <span class="keyword">return</span> arr</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><ul>
<li>构造一个最大堆，交换堆顶和堆末元素, 堆大小依次减1，循坏至堆大小为1</li>
<li>不稳定排序</li>
<li>时间复杂度：O(nlogn)</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">maxHeapify</span>(<span class="params">arr, top, last</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> lChild = top * <span class="number">2</span> + <span class="number">1</span>,</div><div class="line">      rChild = top * <span class="number">2</span> + <span class="number">2</span>;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (lChild &gt; last || rChild &gt; last) <span class="keyword">return</span></div><div class="line"></div><div class="line">  maxHeapify(arr, lChild, last);</div><div class="line">  maxHeapify(arr, rChild, last);</div><div class="line">  <span class="keyword">var</span> max = top;</div><div class="line">  <span class="keyword">if</span> (arr[lChild] &gt; arr[max]) max = lChild;</div><div class="line">  <span class="keyword">if</span> (arr[rChild] &gt; arr[max]) max = rChild;</div><div class="line">  <span class="keyword">if</span> (max !== top) swap(arr, top, max);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">heapSort</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> last = arr.length - <span class="number">1</span>; last &gt; <span class="number">0</span>; last--) &#123;</div><div class="line">    maxHeapify(arr, <span class="number">0</span>, last);</div><div class="line">    swap(arr, <span class="number">0</span>, last)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> arr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[浏览器兼容性问题]]></title>
      <url>http://mlxiao.com/2017/02/04/browser-compatibility/</url>
      <content type="html"><![CDATA[<p>兼容性问题大多针对IE系列，此文收集各种网上和身边遇到的兼容性问题及其解决方案，长期更新</p>
<a id="more"></a>
<p><strong>IE6不支持png背景透明</strong><br><em>解决方案：</em><a href="http://www.zhangxinxu.com/wordpress/2009/08/ie6%E4%B8%8Bpng%E8%83%8C%E6%99%AF%E4%B8%8D%E9%80%8F%E6%98%8E%E9%97%AE%E9%A2%98%E7%9A%84%E7%BB%BC%E5%90%88%E6%8B%93%E5%B1%95/" target="_blank" rel="external">@张鑫旭博客</a></p>
<ul>
<li><p>使用滤镜</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.target</span> &#123;<span class="attribute">background</span>:<span class="built_in">url</span>(path/to/image);&#125;</div><div class="line">*<span class="selector-tag">html</span> <span class="selector-class">.target</span> &#123;<span class="attribute">background</span>:none; <span class="attribute">filter</span>:progid:DXImageTransform.Microsoft.<span class="built_in">AlphaImageLoader</span>(src=<span class="string">'path/to/image'</span>);&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>使用jquery插件<a href="https://github.com/johnantoni/jquery.pngfix" target="_blank" rel="external">jquery.pngFix.pack.js</a></p>
</li>
</ul>
<hr>
<p><strong>IE6双倍margin</strong><br>在IE6下，如果对元素设置了浮动，同时又设置了margin-left或margin-right，margin值会加倍。<br><em>解决方案：</em>在float的标签样式控制中加入 _display:inline; 将其转化为行内属性。( _ 这个符号只有ie6会识别)</p>
<hr>
<p><strong>渐进识别的方式，从总体中逐渐排除局部</strong><br>首先，巧妙的使用“\9”这一标记，将IE游览器从所有情况中分离出来。<br>接着，再次使用 “+” 将IE8和IE7、IE6分离开来，这样IE8已经独立识别。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.target &#123;</div><div class="line">  background-color:#f1ee18; /*所有识别*/</div><div class="line">  .background-color:#00deff\9; /*IE6、7、8识别*/</div><div class="line">  +background-color:#a200ff; /*IE6、7识别*/</div><div class="line">  _background-color:#1e0bd1; /*IE6识别*/</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p><strong>Chrome 中文界面下默认会将小于 12px 的文本强制按照 12px 显示</strong><br><em>解决方案：</em> <code>-webkit-text-size-adjust: none;</code></p>
<hr>
<p><strong>scrollTop属性</strong><br>chrome写法是<code>document.body.scrollTop</code>, IE和旧版firefox写法是<code>document.documentElement.scrollTop</code><br><em>解决方案：</em> <code>var scrollTop = document.body.scrollTop || document.documentElement.scrollTop;</code></p>
]]></content>
    </entry>
    
  
  
</search>
